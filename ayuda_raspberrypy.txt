Espacio disponible en disco
===========================
df -h

Copiar Archivos con progreso y sin privilegios ni usuarios
===========================================================
pv Origin_path > destination_path

realizar una operacion sobre archivos con nombres similares
===========================================================
for f in The.Expanse.S02*; do echo "$f";done  

Montaje de una unidad USB
=========================
mkdir /mnt/usb
sudo mount -o uid=pi,gid=pi /dev/sda1 /mnt/usb

Montaje de uniodad SMB
======================
mount -t cifs //server/share /mnt/abc -o user=user,pass=password,dom=domain
umount /mnt/abc

mount -t cifs //192.168.1.106/movies /home/pi/nas -o user=hurtan983,pass=nhy6bgt5vfr4,uid=pi,gid=pi

Montaje unidad SSH SFTP
=======================
sshfs <username>@<ipaddress>:/remotepath ~/remoteserv

sudo sshfs ubuntu@www.grupojad.com.co:/var/www /home/pi/grupojad -o IdentityFile=/home/pi/.ssh/mail_server.pem -o allow_other

sudo sshfs ubuntu@cloud1.simpleagri.com:/home/ubuntu /home/pi/simpleagri -o IdentityFile=/home/pi/.ssh/simpleagri.pem -o allow_other

Port Forwarding Local (quiero que la maquina remota haga peticiones por mi)
======================

Imagine you’re on a private network which doesn’t allow connections to a
specific server. Let’s say you’re at work and imgur.com is being blocked.
To get around this we can create a tunnel through a server which isn’t on
our network and thus can access Imgur.

$ ssh -L 9000:imgur.com:80 user@example.com
The key here is -L which says we’re doing local port forwarding. Then it
says we’re forwarding our local port 9000 to imgur.com:80, which is the
default port for HTTP. Now open your browser and go to http://localhost:9000.

The awesome thing about SSH tunnels is that they are encrypted. Nobody is
going to see what sites you’re visiting, they’ll only see an SSH connection
to your server.


Port Forwarding Remoto (quiero que de la maquina remota me hagan peticiones)
===================================00

$ ssh -R 9000:localhost:3000 user@example.com
The syntax here is very similar to local port forwarding, with a single
change of -L for -R. But as with local port forwarding, the syntax remains
the same.

First you need to specify the port on which th remote server will listen,
which in this case is 9000, and next follows localhost for your local
machine, and the local port, which in this case is 3000.

There is one more thing you need to do to enable this. SSH doesn’t by
default allow remote hosts to forwarded ports. To enable this open
/etc/ssh/sshd_config and add the following line somewhere in that config file.

GatewayPorts yes

Make sure you add it only once!

$ sudo vim /etc/ssh/sshd_config
And restart SSH

$ sudo service ssh restart

After this you should be able to connect to the server remotely, even from
your local machine. The way this would work is that you would first create
an SSH tunnel that forwards traffic from the server on port 9000 to your
local machine on port 3000. This means that if you connect to the server
on port 9000 from your local machine, you’ll actually make a request to
your machine through the SSH tunnel.

Memoria disponible
========================
free -h

Distribucion del espacio usado por los archivos
===============================================
ncdu /

Listar inalambricas disponibles
===============================
sudo iwlist wlan0 scan | less

Configurar WIFI
=======================
sudo emacs /etc/wpa_supplicant/wpa_supplicant.conf
sudo wpa_cli reconfigure
ifconfig wlan0

To connect manually, you need to first start up wpa_cli. This assumes that wpa_supplicant is already running,
which it should be in most cases. If it’s not, you will see an error when you start wpa_cli.

Otherwise, once you’re in wpa_cli, it will show a prompt similar to this

Selected interface 'wlan0'

Interactive mode

>

Using the scan and scan_results command, you can scan for the networks and see some basic information

> scan
OK
<2>CTRL-EVENT-SCAN-RESULTS
> scan_results
bssid / frequency / signal level / flags / ssid
00:55:ab:25:ac:5a 2462	   -71	 [WPA2-PSK-CCMP][ESS]	WLAN-Network
00:11:99:51:ba:f0 2437	   -64	 [WPA2-PSK-CCMP][ESS]	WLAN-Network2
>

In the above scan results, you can see the 2 networks that the computer can pick up, the frequencies / channel that
they are broadcasting on, the signal strength, the security type, and network name. Both of these networks are
using WPA2 with a Pre-Shared Key.

To connect to one of them, we need to first create a network.

> add_network

This will output a number, which is the network ID.

> add_network
0

This will create an empty network ready for us to configure it.
Next up, we need to set the SSID and PSK for the network.

set_network 0 ssid "WLAN-Network"
set_network 0 psk "SupahSecretPassphrase"

Once these parameters are entered, wpa_cli should show the client trying to connect straight away.
When it tries to connect, it should show something like this

> <2>Trying to authenticate with 00:55:ab:25:ac:5a (SSID='WLAN-Network' freq=2437 MHz)
> <2>Trying to associate with 00:55:ab:25:ac:5a (SSID='WLAN-Network' freq=2437 MHz)
> <2>Associated with 00:55:ab:25:ac:5a
> <2>WPA: Key negotiation completed with 00:55:ab:25:ac:5a [PTK=CCMP GTK=CCMP]
> <2>CTRL-EVENT-CONNECTED - Connection to 00:55:ab:25:ac:5a completed (reauth) [id=0 id_str=]

Once the wireless has connected, it should automatically get an IP address.
If it doesn’t you can run the dhclient command to force it to get an IP address via DHCP,
or edit /etc/network/interfaces to set a static IP address for the wireless network interface.



Configuracion BlueTooth
=======================
sudo bluetoothctl
agent on
default-agent
scan on
pair XX:XX:XX:XX:XX:XX
connect XX:XX:XX:XX:XX:XX
devices
remove XX:XX:XX:XX:XX:XX
agent off
power on
power off

Configuracion RaspberryPi
=========================
sudo raspi-config

Trafico de red
==============
sudo bmon
sudo speedometer -r eth0 -t eth0
sudo iptraf

Procesos activos
================
htop
top

Administradores de archivos visuales
===================================
emacs
mc

Torrent
==========
rtorrent

man rtorrent
^s     Start
^d     Stop and remove
^o     Change Download directory
^k     Stop
a/s/d  Increase the upload throttle by 1/5/50 KB.
z/x/c  Decrease the upload throttle by 1/5/50 KB.
A/S/D  Increase the download throttle by 1/5/50 KB.
Z/X/C  Decrease the download throttle by 1/5/50 KB.
+/-    Change Priority
^q     Quit
 ¿


Administracion de MYSQL
========================
mycli -uroot -ppassword nombre_base_de_datos
